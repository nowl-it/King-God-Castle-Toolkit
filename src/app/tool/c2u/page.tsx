'use client';

import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Card, CardAction, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Spinner } from '@/components/ui/spinner';
import { APP_PACKAGE_ID } from '@/utils/consts';
import { log } from '@/utils/logger';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { invoke } from '@tauri-apps/api/core';
import { open } from '@tauri-apps/plugin-dialog';
import { AlertCircleIcon } from 'lucide-react';
import Link from 'next/link';
import { useState } from 'react';
import { toast } from 'sonner';

export default function Page() {
	const [appPath, setAppPath] = useState<string | null>(null);
	const [exportPath, setExportPath] = useState<string | null>(null);

	const queryClient = useQueryClient();

	const assetRipperCheckerQuery = useQuery({
		queryKey: ['check_asset_ripper', APP_PACKAGE_ID],
		queryFn: (): Promise<string[]> => invoke('check_asset_ripper'),
		staleTime: 10 * 60 * 1000, // 10 minutes
	});

	// Mutation ƒë·ªÉ Convert To Unity
	const C2UMutation = useMutation({
		mutationFn: ({ appPath, outPath }: { appPath: string; outPath: string }) => invoke('c2u', { appPath, outPath }),
		onSuccess: () => {
			toast('üéâ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!', {
				description: `ƒê√£ l∆∞u t·∫°i: ${exportPath}`,
				duration: 5000,
			});
		},
		onError: (error: Error) => {
			toast('‚ùå Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i!', {
				description: error ? error.message : 'C√≥ l·ªói x·∫£y ra khi chuy·ªÉn ƒë·ªïi file',
				duration: 5000,
			});
		},
	});

	// Test mutation ƒë·ªÉ ki·ªÉm tra AssetRipper enhancement
	const testMutation = useMutation({
		mutationFn: () => invoke('test_asset_ripper_enhancement') as Promise<string>,
		onSuccess: (result: string) => {
			toast('üéâ Test th√†nh c√¥ng!', {
				description: result,
				duration: 5000,
			});
		},
		onError: (error: Error) => {
			toast('‚ùå Test th·∫•t b·∫°i!', {
				description: error ? error.message : 'C√≥ l·ªói x·∫£y ra khi test',
				duration: 5000,
			});
		},
	});

	// Loading state
	if (assetRipperCheckerQuery.isLoading) {
		return (
			<section className='flex h-full w-full flex-col items-center justify-center'>
				<Spinner size='large' />
				<p className='text-muted-foreground mt-4 text-sm'>ƒêang ki·ªÉm tra tool...</p>
			</section>
		);
	}

	// Error state - AssetRipper not available
	if (assetRipperCheckerQuery.error) {
		return (
			<section className='flex h-full w-full flex-col items-center justify-center'>
				<Card className='w-full max-w-md border-red-200 bg-red-50'>
					<CardHeader>
						<CardTitle className='text-red-700'>L·ªói AssetRipper</CardTitle>
						<CardDescription className='text-red-600'>
							AssetRipper kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.
						</CardDescription>
					</CardHeader>
					<CardContent>
						{assetRipperCheckerQuery.error && (
							<p className='mb-4 text-sm text-red-600'>
								Chi ti·∫øt: {assetRipperCheckerQuery.error.message}
							</p>
						)}
						<Button
							onClick={() => assetRipperCheckerQuery.refetch()}
							disabled={assetRipperCheckerQuery.isLoading}
							variant='destructive'
						>
							{assetRipperCheckerQuery.isLoading ? 'ƒêang ki·ªÉm tra...' : 'Ki·ªÉm tra l·∫°i'}
						</Button>
					</CardContent>
				</Card>
			</section>
		);
	}

	// Error state - AssetRipper not available
	if (assetRipperCheckerQuery && assetRipperCheckerQuery.error) {
		return (
			<section className='flex h-full w-full flex-col items-center justify-center'>
				<Card className='w-full max-w-md border-red-200 bg-red-50'>
					<CardHeader>
						<CardTitle className='text-red-700'>L·ªói t·∫£i phi√™n b·∫£n</CardTitle>
						<CardDescription className='text-red-600'>
							Kh√¥ng th·ªÉ t·∫£i danh s√°ch phi√™n b·∫£n ·ª©ng d·ª•ng.
						</CardDescription>
					</CardHeader>
					<CardContent>
						<p className='mb-4 text-sm text-red-600'>Chi ti·∫øt: {assetRipperCheckerQuery}</p>
						<Button
							onClick={() =>
								queryClient.invalidateQueries({
									queryKey: ['AssetRipper_get_version', APP_PACKAGE_ID],
								})
							}
							variant='destructive'
						>
							Th·ª≠ l·∫°i
						</Button>
					</CardContent>
				</Card>
			</section>
		);
	}

	async function appPathCheck() {
		const saveTo = await open({
			title: 'Ch·ªçn ·ª©ng d·ª•ng (.xapk)',
			directory: false,
			multiple: false,
		});
		if (!saveTo) {
			toast('‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn file.');
			return;
		}
		setAppPath(saveTo);
	}

	async function exportPathCheck() {
		const saveTo = await open({
			title: 'Ch·ªçn n∆°i l∆∞u d·ª± √°n Unity',
			directory: true,
			multiple: false,
		});
		if (!saveTo) {
			toast('‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn n∆°i l∆∞u file.');
			return;
		}
		setExportPath(saveTo);
	}

	async function onSubmit() {
		if (!exportPath) {
			toast('‚ö†Ô∏è B·∫°n ch∆∞a ch·ªçn n∆°i l∆∞u file.');
			return;
		}

		try {
			await C2UMutation.mutateAsync({
				appPath: appPath!,
				outPath: exportPath,
			});
		} catch (error) {
			log.error('Convert to Unity failed', 'C2UPage', { appPath, exportPath, error });
		}
	}

	return (
		<section className='flex h-full w-full flex-col items-center justify-center gap-6'>
			<Card className='w-full max-w-lg border-0 shadow-xl backdrop-blur-md'>
				<CardHeader>
					<CardTitle>Convert to Unity</CardTitle>
					<CardDescription>Chuy·ªÉn ƒë·ªïi King God Castle th√†nh d·ª± √°n Unity</CardDescription>
					<CardAction>
						<Link href='/tool/install' className='text-primary/80 text-sm underline'>
							T√¥i ch∆∞a t·∫£i game
						</Link>
					</CardAction>
				</CardHeader>
				<CardContent className='space-y-4'>
					<Alert variant='destructive'>
						<AlertCircleIcon />
						<AlertTitle>L∆∞u √Ω</AlertTitle>
						<AlertDescription>
							<p>Vui l√≤ng ƒë·ªçc k·ªπ c√°c ƒëi·ªÅu sau tr∆∞·ªõc khi ch·∫°y:</p>
							<ul className='list-inside list-decimal text-sm'>
								<li>
									<strong>
										File game t·∫£i v·ªÅ ph·∫£i c√≥ ƒë·ªãnh d·∫°ng {'<APP_ID>@<VERSION>.xapk'} v√† ph·∫£i ƒë∆∞·ª£c t·∫£i
										t·ª´ m·ª•c{' '}
										<Link href='/tool/install' className='text-primary'>
											Tools/Install Game
										</Link>{' '}
										c·ªßa ph·∫ßn m·ªÅm ho·∫∑c t·ª´ trang APKPure.
									</strong>
								</li>
								<li>
									ƒê·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t, h√£y ƒë·∫£m b·∫£o r·∫±ng m√°y b·∫°n c√≥ t·ªëi thi·ªÉu{' '}
									<strong>8Gb RAM</strong> v√† c√≤n d∆∞ <strong>40Gb b·ªô nh·ªõ</strong>.
								</li>
								<li>
									Kh√¥ng <strong>can thi·ªáp</strong> v√†o qu√° tr√¨nh t·∫£i xu·ªëng; kh√¥ng ƒë·ªÉ m√°y c·ªßa b·∫°n{' '}
									<strong>ng·ªß ho·∫∑c t·∫Øt m√†n h√¨nh</strong>.
								</li>
								<li>
									Qu√° tr√¨nh chuy·ªÉn ƒë·ªïi c√≥ th·ªÉ m·∫•t t·ª´ <strong>15 ƒë·∫øn 45 ph√∫t</strong>, t√πy thu·ªôc v√†o{' '}
									<strong>hi·ªáu su·∫•t m√°y t√≠nh</strong> c·ªßa b·∫°n.
								</li>
								<li>
									<strong>Kh√¥ng ch√®n/ch·∫°y b·∫•t k·ª≥ ph·∫ßn m·ªÅm can thi·ªáp</strong> n√†o v√†o qu√° tr√¨nh chuy·ªÉn
									ƒë·ªïi.
								</li>
							</ul>
						</AlertDescription>
					</Alert>
					{!C2UMutation.isPending && (
						<>
							<div className='flex w-full items-center justify-between space-x-6 rounded p-2 outline'>
								{appPath ? (
									<p className='truncate text-sm'>{appPath}</p>
								) : (
									<span className='text-sm text-gray-500'>Ch∆∞a ch·ªçn ·ª©ng d·ª•ng</span>
								)}
								<Button type='button' variant='outline' onClick={appPathCheck}>
									Ch·ªçn ·ª©ng d·ª•ng (.xapk)
								</Button>
							</div>
							<div className='flex w-full items-center justify-between space-x-6 rounded p-2 outline'>
								{exportPath ? (
									<p className='truncate text-sm'>{exportPath}</p>
								) : (
									<span className='text-sm text-gray-500'>Ch∆∞a ch·ªçn th∆∞ m·ª•c</span>
								)}
								<Button type='button' variant='outline' onClick={exportPathCheck}>
									Ch·ªçn th∆∞ m·ª•c
								</Button>
							</div>
						</>
					)}
					<Button
						type='button'
						variant='secondary'
						onClick={() => testMutation.mutate()}
						disabled={testMutation.isPending}
						className='w-full'
					>
						{testMutation.isPending ? 'ƒêang test...' : 'üß™ Test AssetRipper Enhancement'}
					</Button>
					<Button
						type='button'
						variant='outline'
						onClick={onSubmit}
						disabled={!appPath || !exportPath || C2UMutation.isPending}
					>
						{C2UMutation.isPending ? 'ƒêang chuy·ªÉn ƒë·ªïi...' : 'Chuy·ªÉn ƒë·ªïi'}
					</Button>
				</CardContent>
			</Card>
		</section>
	);
}
